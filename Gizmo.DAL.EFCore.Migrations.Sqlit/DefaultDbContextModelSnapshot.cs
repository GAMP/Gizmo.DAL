// <auto-generated />
using System;
using GizmoDALV2;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gizmo.DAL.EFCore.Migrations.Sqlite
{
    [DbContext(typeof(DefaultDbContext))]
    partial class DefaultDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.12");

            modelBuilder.Entity("Gizmo.DAL.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("DeviceId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Name_Device_DeviceHdmi");

                    b.ToTable("Device", (string)null);
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.DeviceHost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("DeviceHostId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DeviceId")
                        .HasColumnOrder(1);

                    b.Property<int>("HostId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("HostId")
                        .HasColumnOrder(2);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HostId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex(new[] { "DeviceId", "HostId" }, "UQ_HostDevice")
                        .IsUnique();

                    b.ToTable("DeviceHost", (string)null);
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.FiscalReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("FiscalReceiptId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DocumentNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int?>("RegisterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Signature")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<int?>("TaxSystem")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RegisterId");

                    b.HasIndex("ShiftId");

                    b.ToTable("FiscalReceipt", (string)null);
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.InvoiceFiscalReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("InvoiceFiscalReceiptId");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("FiscalReceiptId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int>("InvoiceId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int?>("RegisterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FiscalReceiptId")
                        .IsUnique()
                        .HasDatabaseName("UQ_FiscalReceipt");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("RegisterId");

                    b.HasIndex("ShiftId");

                    b.ToTable("InvoiceFiscalReceipt", (string)null);
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.PaymentIntent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PaymentIntentId")
                        .HasColumnOrder(0);

                    b.Property<decimal>("Amount")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(8);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<Guid>("Provider")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(7);

                    b.Property<int>("State")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("TransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("TransactionTime")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(6);

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("UQ_Guid_PaymentIntent_PaymentIntentDeposit_PaymentIntentOrder");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentIntent", (string)null);
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.UserAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserAgreementId")
                        .HasColumnOrder(0);

                    b.Property<string>("Agreement")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOptions")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<int>("Options")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("UserAgreement", (string)null);
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.UserAgreementState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserAgreementStateId")
                        .HasColumnOrder(0);

                    b.Property<int>("AcceptState")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserAgreementId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserId");

                    b.HasIndex("UserAgreementId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("UQ_UserAgreementState");

                    b.ToTable("UserAgreementState", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.App", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AppId")
                        .HasColumnOrder(0);

                    b.Property<int>("AgeRating")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(9);

                    b.Property<int>("AppCategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DefaultExecutableId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(11);

                    b.Property<string>("Description")
                        .HasMaxLength(65535)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.Property<int?>("DeveloperId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(10);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Options")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(8);

                    b.Property<int?>("PublisherId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(6);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("Version")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.HasIndex("AppCategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("UQ_Guid_App");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PublisherId");

                    b.ToTable("App", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AppCategoryId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("UQ_Guid_AppCategory");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ParentId");

                    b.ToTable("AppCategory", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppEnterprise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AppEnterpriseId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("UQ_Guid_AppEnterprise");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Name_AppEnterprise");

                    b.ToTable("AppEnterprise", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppExe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AppExeId")
                        .HasColumnOrder(0);

                    b.Property<bool>("Accessible")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(14);

                    b.Property<int>("AppId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("Arguments")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.Property<string>("Caption")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DefaultDeploymentId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(9);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(11);

                    b.Property<string>("ExecutablePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(13);

                    b.Property<int>("Modes")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Options")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(12);

                    b.Property<int>("ReservationType")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(10);

                    b.Property<int>("RunMode")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(8);

                    b.Property<string>("WorkingDirectory")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DefaultDeploymentId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AppExe", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppExeCdImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AppExeCdImageId")
                        .HasColumnOrder(0);

                    b.Property<int>("AppExeId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<bool>("CheckExitCode")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(6);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MountOptions")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("AppExeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("UQ_Guid_AppExeCdImage");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AppExeCdImage", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppExeDeployment", b =>
                {
                    b.Property<int>("AppExeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeploymentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UseOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("AppExeId", "DeploymentId");

                    b.HasIndex("AppExeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeploymentId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AppExeDeployment", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppExeImage", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AppExeId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Image")
                        .HasMaxLength(16777215)
                        .HasColumnType("BLOB");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Id");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AppExeImage", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppExeLicense", b =>
                {
                    b.Property<int>("AppExeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LicenseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UseOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("AppExeId", "LicenseId");

                    b.HasIndex("AppExeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LicenseId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AppExeLicense", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppExeMaxUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AppExeMaxUserId")
                        .HasColumnOrder(0);

                    b.Property<int>("AppExeId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxUsers")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int>("Mode")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex(new[] { "AppExeId", "Mode" }, "UQ_AppExeAppExeMode")
                        .IsUnique();

                    b.ToTable("AppExeMaxUser", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppExePersonalFile", b =>
                {
                    b.Property<int>("AppExeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonalFileId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UseOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("AppExeId", "PersonalFileId");

                    b.HasIndex("AppExeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PersonalFileId");

                    b.ToTable("AppExePersonalFile", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppExeTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AppExeTaskId");

                    b.Property<int>("Activation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppExeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskBaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UseOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppExeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("TaskBaseId");

                    b.ToTable("AppExeTask", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AppGroupId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("UQ_Guid_AppGroup");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Name_AppGroup");

                    b.ToTable("AppGroup", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppGroupApp", b =>
                {
                    b.Property<int>("AppGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<int>("AppId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasKey("AppGroupId", "AppId");

                    b.HasIndex("AppGroupId");

                    b.HasIndex("AppId");

                    b.ToTable("AppGroupApp", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppImage", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AppId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Image")
                        .HasMaxLength(16777215)
                        .HasColumnType("BLOB");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Id");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AppImage", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AppLinkId")
                        .HasColumnOrder(0);

                    b.Property<int>("AppId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("Caption")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(6);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("UQ_Guid_AppLink");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AppLink", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppRating", b =>
                {
                    b.Property<int>("AppId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.HasKey("AppId", "UserId");

                    b.HasIndex("AppId");

                    b.HasIndex("UserId");

                    b.ToTable("AppRating", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AppStatId")
                        .HasColumnOrder(0);

                    b.Property<int>("AppExeId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int>("AppId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("HostId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<double>("Span")
                        .HasColumnType("REAL")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(6);

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("AppExeId");

                    b.HasIndex("AppId");

                    b.HasIndex("HostId");

                    b.HasIndex("UserId");

                    b.ToTable("AppStat", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AssetId")
                        .HasColumnOrder(0);

                    b.Property<int>("AssetTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("Barcode")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(6);

                    b.Property<string>("SmartCardUID")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<string>("Tag")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("Barcode")
                        .IsUnique()
                        .HasDatabaseName("UQ_Barcode_Asset");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("SmartCardUID")
                        .IsUnique()
                        .HasDatabaseName("UQ_SmartCardUID_Asset");

                    b.ToTable("Asset", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AssetTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AssetTransactionId")
                        .HasColumnOrder(0);

                    b.Property<int>("AssetId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int>("AssetTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("AssetTypeName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(6);

                    b.Property<int?>("CheckedInById")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RegisterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("CheckedInById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserId");

                    b.ToTable("AssetTransaction", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AssetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AssetTypeId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(65535)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("PartNumber")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Name_AssetType");

                    b.ToTable("AssetType", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AttributeId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("FriendlyName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Name_Attribute");

                    b.ToTable("Attribute", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.BillProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("BillProfileId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Name_BillProfile");

                    b.ToTable("BillProfile", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Member Prices"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Guests Prices"
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.BillRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("BillRateId")
                        .HasColumnOrder(0);

                    b.Property<int>("BillProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("ChargeAfter")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<int>("ChargeEvery")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MinimumFee")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<int>("Options")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<decimal>("Rate")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<decimal>("StartFee")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("BillProfileId");

                    b.ToTable("BillRate", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillProfileId = 1,
                            ChargeAfter = 1,
                            ChargeEvery = 5,
                            IsDefault = true,
                            MinimumFee = 2m,
                            Options = 0,
                            Rate = 2m,
                            StartFee = 1m
                        },
                        new
                        {
                            Id = 2,
                            BillProfileId = 2,
                            ChargeAfter = 1,
                            ChargeEvery = 5,
                            IsDefault = true,
                            MinimumFee = 2m,
                            Options = 0,
                            Rate = 2m,
                            StartFee = 1m
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.BillRatePeriodDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("BillRatePeriodDayId");

                    b.Property<int>("BillRateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BillRateId", "Day")
                        .IsUnique()
                        .HasDatabaseName("UQ_BillRatePeriodDay");

                    b.ToTable("BillRatePeriodDay", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.BillRatePeriodDayTime", b =>
                {
                    b.Property<int>("PeriodDayId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StartSecond")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EndSecond")
                        .HasColumnType("INTEGER");

                    b.HasKey("PeriodDayId", "StartSecond", "EndSecond");

                    b.HasIndex("PeriodDayId");

                    b.ToTable("BillRatePeriodDayTime", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.BillRateStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("BillRateStepId")
                        .HasColumnOrder(0);

                    b.Property<int>("Action")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int>("BillRateId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<decimal>("Charge")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<int>("Minute")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<decimal>("Rate")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.Property<int>("TargetMinute")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.HasIndex("BillRateId", "Minute")
                        .IsUnique()
                        .HasDatabaseName("UQ_BillRateMinute");

                    b.ToTable("BillRateStep", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.BundleProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("BundleProductId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Options")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductBundleId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<decimal>("Quantity")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProductBundleId");

                    b.HasIndex("ProductId");

                    b.ToTable("BundleProduct", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Options = 0,
                            Price = 1m,
                            ProductBundleId = 5,
                            ProductId = 3,
                            Quantity = 1m
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Options = 0,
                            Price = 2m,
                            ProductBundleId = 5,
                            ProductId = 4,
                            Quantity = 1m
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.BundleProductUserPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("BundleProductUserPriceId")
                        .HasColumnOrder(0);

                    b.Property<int>("BundleProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Price")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<int>("UserGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("BundleProductId", "UserGroupId")
                        .IsUnique()
                        .HasDatabaseName("UQ_BundleProductUserGroup");

                    b.ToTable("BundleProductUserPrice", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ClientTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ClientTaskId");

                    b.Property<int>("Activation")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskBaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UseOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("TaskBaseId");

                    b.ToTable("ClientTask", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Deployment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("DeploymentId")
                        .HasColumnOrder(0);

                    b.Property<int>("ComparisonLevel")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(10);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<string>("ExcludeDirectories")
                        .HasMaxLength(65535)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<string>("ExcludeFiles")
                        .HasMaxLength(65535)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(9);

                    b.Property<string>("IncludeDirectories")
                        .HasMaxLength(65535)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(6);

                    b.Property<string>("IncludeFiles")
                        .HasMaxLength(65535)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(7);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<int>("Options")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(11);

                    b.Property<string>("RegistryString")
                        .HasMaxLength(16777215)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(8);

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("UQ_Guid_Deployment");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Name_Deployment");

                    b.ToTable("Deployment", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.DeploymentDeployment", b =>
                {
                    b.Property<int>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChildId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UseOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ParentId");

                    b.ToTable("DeploymentDeployment", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.DepositPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("DepositPaymentId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DepositTransactionId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int?>("FiscalReceiptId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(8);

                    b.Property<int>("FiscalReceiptStatus")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<bool>("IsVoided")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(9);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int>("RefundStatus")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<decimal>("RefundedAmount")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.Property<int?>("RegisterId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<int?>("ShiftId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepositTransactionId");

                    b.HasIndex("FiscalReceiptId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PaymentId");

                    b.HasIndex("RegisterId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("UserId");

                    b.ToTable("DepositPayment", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.DepositTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("DepositTransactionId")
                        .HasColumnOrder(0);

                    b.Property<decimal>("Amount")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<decimal>("Balance")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RegisterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("RegisterId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("UserId");

                    b.ToTable("DepositTransaction", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Feed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("FeedId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Maximum")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Feed", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Host", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("HostId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(7);

                    b.Property<int?>("HostGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int?>("IconId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("State")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("UQ_Guid_Host_HostComputer_HostEndpoint");

                    b.HasIndex("HostGroupId");

                    b.HasIndex("IconId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Host", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("HostGroupId")
                        .HasColumnOrder(0);

                    b.Property<int?>("AppGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DefaultGuestGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<int>("Options")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<int?>("SecurityProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<string>("SkinName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("AppGroupId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DefaultGuestGroupId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Name_HostGroup");

                    b.HasIndex("SecurityProfileId");

                    b.ToTable("HostGroup", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultGuestGroupId = 2,
                            Name = "Computers",
                            Options = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultGuestGroupId = 2,
                            Name = "Endpoints",
                            Options = 0
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostGroupUserBillProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("HostGroupUserBillProfileId")
                        .HasColumnOrder(0);

                    b.Property<int>("BillProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int>("HostGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<int>("UserGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BillProfileId");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("HostGroupId", "UserGroupId")
                        .IsUnique()
                        .HasDatabaseName("UQ_HostGroupUserBillProfile");

                    b.ToTable("HostGroupUserBillProfile", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostGroupWaitingLine", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("HosGroupId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EnablePriorities")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeOutOptions")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ModifiedById");

                    b.ToTable("HostGroupWaitingLine", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostGroupWaitingLineEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("HostGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsManualPosition")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsReadyTimedOut")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<double>("ReadyTime")
                        .HasColumnType("REAL")
                        .HasColumnOrder(6);

                    b.Property<int>("State")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(8);

                    b.Property<double>("TimeInLine")
                        .HasColumnType("REAL")
                        .HasColumnOrder(5);

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HostGroupId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserId");

                    b.ToTable("HostGroupWaitingLineEntry", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostLayoutGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("HostLayoutGroupId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Name_HostLayoutGroup");

                    b.ToTable("HostLayoutGroup", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Name = "Default"
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostLayoutGroupImage", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("HostLayoutGroupId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Image")
                        .HasMaxLength(16777215)
                        .HasColumnType("BLOB");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Id");

                    b.HasIndex("ModifiedById");

                    b.ToTable("HostLayoutGroupImage", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostLayoutGroupLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("HostLayoutGroupLayoutId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<int>("HostId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int>("HostLayoutGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsHidden")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<int>("X")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HostId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("HostLayoutGroupId", "HostId")
                        .IsUnique()
                        .HasDatabaseName("UQ_HostLayoutGroupHost");

                    b.ToTable("HostLayoutGroupLayout", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Icon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("IconId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasMaxLength(16777215)
                        .HasColumnType("BLOB");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Icon", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("InvoiceId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(12);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Outstanding")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(8);

                    b.Property<int>("OutstandngPoints")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(9);

                    b.Property<int>("PointsTotal")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<int>("ProductOrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int?>("RegisterId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(11);

                    b.Property<int>("ReturnFiscalReceiptStatus")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(14);

                    b.Property<int>("SaleFiscalReceiptStatus")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(13);

                    b.Property<int?>("ShiftId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(10);

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<decimal>("TaxTotal")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(6);

                    b.Property<decimal>("Total")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(7);

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProductOrderId");

                    b.HasIndex("RegisterId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.InvoiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("InvoiceLineId")
                        .HasColumnOrder(0);

                    b.Property<decimal?>("Cost")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(10);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(20);

                    b.Property<bool>("IsVoided")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(21);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("PayType")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(18);

                    b.Property<int?>("Points")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(15);

                    b.Property<int>("PointsAward")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(16);

                    b.Property<int>("PointsTotal")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(14);

                    b.Property<int?>("PointsTransactionId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(19);

                    b.Property<decimal>("PreTaxTotal")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(12);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<decimal>("Quantity")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<int?>("RegisterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TaxRate")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(11);

                    b.Property<decimal>("TaxTotal")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(17);

                    b.Property<decimal>("Total")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(13);

                    b.Property<decimal?>("UnitCost")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(9);

                    b.Property<decimal>("UnitListPrice")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(6);

                    b.Property<int?>("UnitPointsListPrice")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(8);

                    b.Property<int>("UnitPointsPrice")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PointsTransactionId")
                        .IsUnique()
                        .HasDatabaseName("UQ_PointsTransaction_InvoiceLine_InvoiceLineExtended_InvoiceLineProduct_InvoiceLineSession_InvoiceLineTime_InvoiceLineTimeFixed");

                    b.HasIndex("RegisterId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("UserId");

                    b.ToTable("InvoiceLine", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.InvoicePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("InvoicePaymentId")
                        .HasColumnOrder(0);

                    b.Property<decimal>("Amount")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int>("RefundStatus")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("RefundedAmount")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT");

                    b.Property<int?>("RegisterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PaymentId");

                    b.HasIndex("RegisterId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("UserId");

                    b.ToTable("InvoicePayment", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("LicenseId")
                        .HasColumnOrder(0);

                    b.Property<string>("Assembly")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("Plugin")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<byte[]>("Settings")
                        .HasMaxLength(65535)
                        .HasColumnType("BLOB")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("UQ_Guid_License");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Name_License");

                    b.ToTable("License", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.LicenseKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("LicenseKeyId")
                        .HasColumnOrder(0);

                    b.Property<int?>("AssignedHostId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<int>("LicenseId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Value")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("BLOB")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("AssignedHostId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("UQ_Guid_LicenseKey");

                    b.HasIndex("LicenseId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("LicenseKey", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("LogId")
                        .HasColumnOrder(0);

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<int?>("HostNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<string>("Hostname")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(8);

                    b.Property<int>("MessageType")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<int>("ModuleType")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("ModuleVersion")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Category" }, "IX_Category");

                    b.HasIndex(new[] { "HostNumber" }, "IX_HostNumber");

                    b.HasIndex(new[] { "MessageType" }, "IX_MessageType");

                    b.HasIndex(new[] { "Time" }, "IX_Time");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.LogException", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LogId")
                        .HasColumnOrder(0);

                    b.Property<byte[]>("ExceptionData")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("BLOB")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("LogException", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Mapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("MappingId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MountPoint")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<int>("Options")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(8);

                    b.Property<string>("Password")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(7);

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("Username")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("MountPoint")
                        .IsUnique()
                        .HasDatabaseName("UQ_MountPoint");

                    b.ToTable("Mapping", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.MonetaryUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("MonetaryUnitId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<decimal>("Value")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Name_MonetaryUnit");

                    b.ToTable("MonetaryUnit", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            IsDeleted = false,
                            Name = "1 Cent",
                            Value = 0.01m
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 1,
                            IsDeleted = false,
                            Name = "5 Cent",
                            Value = 0.05m
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 2,
                            IsDeleted = false,
                            Name = "10 Cent",
                            Value = 0.10m
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 3,
                            IsDeleted = false,
                            Name = "25 Cent",
                            Value = 0.25m
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 4,
                            IsDeleted = false,
                            Name = "1 Dollar",
                            Value = 1.00m
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 5,
                            IsDeleted = false,
                            Name = "2 Dollar",
                            Value = 2.00m
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 6,
                            IsDeleted = false,
                            Name = "5 Dollar",
                            Value = 5.00m
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 7,
                            IsDeleted = false,
                            Name = "10 Dollar",
                            Value = 10.00m
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 8,
                            IsDeleted = false,
                            Name = "20 Dollar",
                            Value = 20.00m
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 9,
                            IsDeleted = false,
                            Name = "50 Dollar",
                            Value = 50.00m
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 10,
                            IsDeleted = false,
                            Name = "100 Dollar",
                            Value = 100.00m
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("NewsId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasMaxLength(65535)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(6);

                    b.Property<string>("MediaUrl")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("News", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("NoteId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Options")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("Sevirity")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(16777215)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Note", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PaymentId")
                        .HasColumnOrder(0);

                    b.Property<decimal>("Amount")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<decimal>("AmountReceived")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DepositTransactionId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(8);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsVoided")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int?>("PointTransactionId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(9);

                    b.Property<int>("RefundStatus")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("RefundedAmount")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT");

                    b.Property<int?>("RegisterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepositTransactionId")
                        .IsUnique()
                        .HasDatabaseName("UQ_DepositTransaction");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PointTransactionId")
                        .IsUnique()
                        .HasDatabaseName("UQ_PointsTransaction_Payment");

                    b.HasIndex("RegisterId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("UserId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PaymentMethodId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsClient")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(10);

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsManager")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(8);

                    b.Property<bool>("IsPortal")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(9);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<int>("Options")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<Guid?>("PaymentProvider")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(11);

                    b.Property<decimal>("Surcharge")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Name_PaymentMethod");

                    b.ToTable("PaymentMethod", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            IsClient = true,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsManager = true,
                            IsPortal = false,
                            Name = "Cash",
                            Options = 0,
                            Surcharge = 0m
                        },
                        new
                        {
                            Id = -4,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 2,
                            IsClient = true,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsManager = true,
                            IsPortal = false,
                            Name = "Points",
                            Options = 0,
                            Surcharge = 0m
                        },
                        new
                        {
                            Id = -3,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 3,
                            IsClient = true,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsManager = true,
                            IsPortal = false,
                            Name = "Deposit",
                            Options = 0,
                            Surcharge = 0m
                        },
                        new
                        {
                            Id = -2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 4,
                            IsClient = true,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsManager = true,
                            IsPortal = false,
                            Name = "Credit Card",
                            Options = 0,
                            Surcharge = 0m
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.PersonalFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PersonalFileId")
                        .HasColumnOrder(0);

                    b.Property<bool>("Accessible")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(16);

                    b.Property<int>("Activation")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<string>("Caption")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int>("CompressionLevel")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(8);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Deactivation")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<string>("ExcludeDirectories")
                        .HasMaxLength(65535)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(9);

                    b.Property<string>("ExcludeFiles")
                        .HasMaxLength(65535)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(10);

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(13);

                    b.Property<string>("IncludeDirectories")
                        .HasMaxLength(65535)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(11);

                    b.Property<string>("IncludeFiles")
                        .HasMaxLength(65535)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(12);

                    b.Property<int>("MaxQuota")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<int>("Options")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(15);

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(14);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("UQ_Guid_PersonalFile");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Name_PersonalFile");

                    b.ToTable("PersonalFile", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.PluginLibrary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PluginLibraryId");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Scope")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FileName")
                        .IsUnique()
                        .HasDatabaseName("UQ_FileName");

                    b.HasIndex("ModifiedById");

                    b.ToTable("PluginLibrary", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.PointTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PointTransactionId")
                        .HasColumnOrder(0);

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int>("Balance")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RegisterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("RegisterId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("UserId");

                    b.ToTable("PointTransaction", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.PresetTimeSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PresetTimeSaleId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("PresetTimeSale", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Value = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Value = 5
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Value = 15
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Value = 30
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Value = 60
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.PresetTimeSaleMoney", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PresetTimeSaleMoneyId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("PresetTimeSaleMoney", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Value = 1m
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Value = 2m
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Value = 5m
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Value = 10m
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Value = 20m
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductId")
                        .HasColumnOrder(0);

                    b.Property<string>("Barcode")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(8);

                    b.Property<decimal?>("Cost")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(65535)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int>("OrderOptions")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Points")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<int?>("PointsPrice")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<decimal>("Price")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("PurchaseOptions")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("StockAlert")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT");

                    b.Property<int>("StockOptions")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("StockProductAmount")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT");

                    b.Property<int?>("StockProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique()
                        .HasDatabaseName("UQ_Barcode_Product_ProductBase_ProductBaseExtended_ProductBundle_ProductTime");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Name_Product_ProductBase_ProductBaseExtended_ProductBundle_ProductTime");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("StockProductId");

                    b.ToTable("ProductBase", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductBundleUserPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductBundleUserPriceId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PointsPrice")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<decimal?>("Price")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<int>("ProductBundleId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("PurchaseOptions")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<int>("UserGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("ProductBundleId", "UserGroupId")
                        .IsUnique()
                        .HasDatabaseName("UQ_ProductBundlePriceUserGroup");

                    b.ToTable("ProductBundleUserPrice", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductGroupId");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOption")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Name_ProductGroup");

                    b.HasIndex("ParentId");

                    b.ToTable("ProductGroup", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Guid = new Guid("e798a7fb-448b-4825-8b32-c5ea6db70271"),
                            Name = "Time Offers",
                            SortOption = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 1,
                            Guid = new Guid("e798a7fb-448b-4825-8b32-c5ea6db70272"),
                            Name = "Food",
                            SortOption = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 2,
                            Guid = new Guid("e798a7fb-448b-4825-8b32-c5ea6db70273"),
                            Name = "Drinks",
                            SortOption = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 3,
                            Guid = new Guid("e798a7fb-448b-4825-8b32-c5ea6db70274"),
                            Name = "Sweets",
                            SortOption = 0
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductHostHidden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductHostHiddenId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("HostGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsHidden")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HostGroupId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProductId", "HostGroupId")
                        .IsUnique()
                        .HasDatabaseName("UQ_ProductHostGroup");

                    b.ToTable("ProductHostHidden", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductImageId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasMaxLength(16777215)
                        .HasColumnType("BLOB")
                        .HasColumnOrder(1);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductOL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductOLId")
                        .HasColumnOrder(0);

                    b.Property<decimal?>("Cost")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(10);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DeliveredQuantity")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeliveredTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(19);

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(20);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("PayType")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(18);

                    b.Property<int?>("Points")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(15);

                    b.Property<int>("PointsAward")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(16);

                    b.Property<int>("PointsTotal")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(14);

                    b.Property<decimal>("PreTaxTotal")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(12);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<int>("ProductOrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<decimal>("Quantity")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<int?>("RegisterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TaxRate")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(11);

                    b.Property<decimal>("TaxTotal")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(17);

                    b.Property<decimal>("Total")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(13);

                    b.Property<decimal?>("UnitCost")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(9);

                    b.Property<decimal>("UnitListPrice")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(6);

                    b.Property<int?>("UnitPointsListPrice")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(8);

                    b.Property<int>("UnitPointsPrice")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProductOrderId");

                    b.HasIndex("RegisterId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductOL", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductOrderId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeliveredTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HostId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("PointsTotal")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<int?>("PreferedPaymentMethodId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RegisterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Source")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<decimal>("Tax")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(6);

                    b.Property<decimal>("Total")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("UserNote")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HostId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PreferedPaymentMethodId");

                    b.HasIndex("RegisterId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductOrder", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductPeriod", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Options")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("ProductPeriod", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 7,
                            Options = 0
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductPeriodDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductPeriodDayId");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductPeriodId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductPeriodId");

                    b.HasKey("Id");

                    b.HasIndex("ProductPeriodId", "Day")
                        .IsUnique()
                        .HasDatabaseName("UQ_ProductPeriodDay");

                    b.ToTable("ProductPeriodDay", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 7,
                            Day = 6,
                            ProductPeriodId = 7
                        },
                        new
                        {
                            Id = 8,
                            Day = 0,
                            ProductPeriodId = 7
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductPeriodDayTime", b =>
                {
                    b.Property<int>("PeriodDayId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StartSecond")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EndSecond")
                        .HasColumnType("INTEGER");

                    b.HasKey("PeriodDayId", "StartSecond", "EndSecond");

                    b.HasIndex("PeriodDayId");

                    b.ToTable("ProductPeriodDayTime", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductTaxId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("TaxId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int>("UseOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("TaxId");

                    b.HasIndex(new[] { "ProductId", "TaxId" }, "UQ_TaxProduct")
                        .IsUnique();

                    b.ToTable("ProductTax", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEnabled = false,
                            ProductId = 1,
                            TaxId = 1,
                            UseOrder = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEnabled = false,
                            ProductId = 2,
                            TaxId = 1,
                            UseOrder = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEnabled = false,
                            ProductId = 3,
                            TaxId = 1,
                            UseOrder = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEnabled = false,
                            ProductId = 4,
                            TaxId = 1,
                            UseOrder = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEnabled = false,
                            ProductId = 5,
                            TaxId = 1,
                            UseOrder = 0
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEnabled = false,
                            ProductId = 6,
                            TaxId = 1,
                            UseOrder = 0
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEnabled = false,
                            ProductId = 7,
                            TaxId = 1,
                            UseOrder = 0
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductTimeHostDisallowed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductTimeHostDisallowedId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("HostGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsDisallowed")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductTimeId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HostGroupId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProductTimeId", "HostGroupId")
                        .IsUnique()
                        .HasDatabaseName("UQ_ProductTimeHostGroup");

                    b.ToTable("ProductTimeHostDisallowed", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductTimePeriod", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Options")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("ProductTimePeriod", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 6,
                            Options = 0
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductTimePeriodDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductTimePeriodDayId");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductTimePeriodId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductTimePeriodId");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex(new[] { "ProductTimePeriodId", "Day" }, "UQ_ProductTimePeriodDay")
                        .IsUnique();

                    b.ToTable("ProductTimePeriodDay", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductTimePeriodDayTime", b =>
                {
                    b.Property<int>("PeriodDayId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StartSecond")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EndSecond")
                        .HasColumnType("INTEGER");

                    b.HasKey("PeriodDayId", "StartSecond", "EndSecond");

                    b.HasIndex("PeriodDayId");

                    b.ToTable("ProductTimePeriodDayTime", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductUserDisallowed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductUserDisallowedId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisallowed")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("UserGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("ProductId", "UserGroupId")
                        .IsUnique()
                        .HasDatabaseName("UQ_ProductUserGroup_ProductUserDisallowed");

                    b.ToTable("ProductUserDisallowed", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductUserPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProductUserPriceId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PointsPrice")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<decimal?>("Price")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("PurchaseOptions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("ProductId", "UserGroupId")
                        .IsUnique()
                        .HasDatabaseName("UQ_ProductUserGroup_ProductUserPrice");

                    b.ToTable("ProductUserPrice", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Refund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("RefundId")
                        .HasColumnOrder(0);

                    b.Property<decimal>("Amount")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DepositTransactionId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int?>("PaymentId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int?>("PointTransactionId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<int>("RefundMethodId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<int?>("RegisterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepositTransactionId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PointTransactionId");

                    b.HasIndex("RefundMethodId");

                    b.HasIndex("RegisterId");

                    b.HasIndex("ShiftId");

                    b.ToTable("Refund", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Register", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("RegisterId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("IdleTimeout")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<string>("MacAddress")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("Options")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<decimal>("StartCash")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MacAddress")
                        .IsUnique()
                        .HasDatabaseName("UQ_MACAddress_Register");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Register", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.RegisterTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("RegisterTransactionId")
                        .HasColumnOrder(0);

                    b.Property<decimal>("Amount")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.Property<int>("RegisterId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int?>("ShiftId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("RegisterId");

                    b.HasIndex("ShiftId");

                    b.ToTable("RegisterTransaction", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ReservationId");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(254)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Pin" }, "UQ_Pin")
                        .IsUnique();

                    b.ToTable("Reservation", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ReservationHost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ReservationHostId");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("HostId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PreferedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReservationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HostId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PreferedUserId");

                    b.HasIndex("ReservationId", "HostId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Reservation_Host");

                    b.ToTable("ReservationHost", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ReservationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ReservationUserId");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReservationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserId");

                    b.HasIndex("ReservationId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Reservation_User");

                    b.ToTable("ReservationUser", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.SecurityProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("SecurityProfileId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DisabledDrives")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Name_SecurityProfile");

                    b.ToTable("SecurityProfile", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.SecurityProfilePolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("SecurityProfilePolicyId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("SecurityProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("SecurityProfileId", "Type")
                        .IsUnique()
                        .HasDatabaseName("UQ_SecurityProfilePolicyType");

                    b.ToTable("SecurityProfilePolicy", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.SecurityProfileRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("SecurityProfileRestrictionId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int>("SecurityProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("SecurityProfileId");

                    b.ToTable("SecurityProfileRestriction", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("SettingId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupName")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("Value")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name", "GroupName")
                        .IsUnique()
                        .HasDatabaseName("UQ_NameGroup");

                    b.ToTable("Setting", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ShiftId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(8);

                    b.Property<int?>("EndedById")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsEnding")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("OperatorId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int>("RegisterId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<decimal>("StartCash")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EndedById");

                    b.HasIndex("Id");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OperatorId");

                    b.HasIndex("RegisterId");

                    b.ToTable("Shift", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ShiftCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ShiftCountId")
                        .HasColumnOrder(0);

                    b.Property<decimal>("Actual")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(12);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Deposits")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.Property<decimal>("Difference")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(13);

                    b.Property<decimal>("Expected")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(11);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(14);

                    b.Property<decimal>("PayIns")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(6);

                    b.Property<decimal>("PayOuts")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(8);

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<decimal>("Refunds")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(9);

                    b.Property<decimal>("Sales")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<int>("ShiftId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<decimal>("StartCash")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<decimal>("Voids")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(10);

                    b.Property<decimal>("Withdrawals")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ShiftId", "PaymentMethodId")
                        .IsUnique()
                        .HasDatabaseName("UQ_ShiftCountPaymentMethod");

                    b.ToTable("ShiftCount", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.StockTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("StockTransactionId");

                    b.Property<decimal>("Amount")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OnHand")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RegisterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("SourceProductAmount")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT");

                    b.Property<int?>("SourceProductId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("SourceProductOnHand")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("SourceProductId");

                    b.ToTable("StockTransaction", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.TaskBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TaskId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("UQ_Guid_TaskBase_TaskJunction_TaskNotification_TaskProcess_TaskScript");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Name_TaskBase_TaskJunction_TaskNotification_TaskProcess_TaskScript");

                    b.ToTable("TaskBase", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TaxId");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<int>("UseOrder")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Value")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Name_Tax");

                    b.ToTable("Tax", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "24%",
                            UseOrder = 0,
                            Value = 23m
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "16%",
                            UseOrder = 1,
                            Value = 16m
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "None",
                            UseOrder = 2,
                            Value = 0m
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TokenId");

                    b.Property<string>("ConfirmationCode")
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserId");

                    b.HasIndex("Value")
                        .IsUnique()
                        .HasDatabaseName("UQ_Value");

                    b.ToTable("Token", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Usage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UsageId")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("Seconds")
                        .HasColumnType("REAL")
                        .HasColumnOrder(3);

                    b.Property<int>("UsageSessionId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("UsageSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Usage", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UsageSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UsageSessionId")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("CurrentSecond")
                        .HasColumnType("REAL")
                        .HasColumnOrder(3);

                    b.Property<int?>("CurrentUsageId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<decimal>("MinimumFee")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("NegativeSeconds")
                        .HasColumnType("REAL");

                    b.Property<decimal>("RatesTotal")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StartFee")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CurrentUsageId");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UsageSession", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserId");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Identification")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Sex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SmartCardUID")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("UQ_Guid_User_UserGuest_UserMember_UserOperator");

                    b.HasIndex("Identification")
                        .IsUnique()
                        .HasDatabaseName("UQ_Identification_User_UserGuest_UserMember_UserOperator");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("SmartCardUID")
                        .IsUnique()
                        .HasDatabaseName("UQ_SmartCardUID_User_UserGuest_UserMember_UserOperator");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserAttributeId")
                        .HasColumnOrder(0);

                    b.Property<int>("AttributeId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserId", "AttributeId")
                        .IsUnique()
                        .HasDatabaseName("UQ_UserAttribute");

                    b.ToTable("UserAttribute", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserCredential", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Password")
                        .HasMaxLength(64)
                        .HasColumnType("BLOB")
                        .HasColumnOrder(3)
                        .IsFixedLength();

                    b.Property<byte[]>("Salt")
                        .HasMaxLength(100)
                        .HasColumnType("BLOB")
                        .HasColumnOrder(4)
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Id");

                    b.HasIndex("ModifiedById");

                    b.ToTable("UserCredential", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = new byte[] { 227, 190, 117, 189, 14, 131, 27, 251, 244, 196, 14, 55, 126, 183, 143, 152, 146, 122, 121, 195, 5, 57, 241, 24, 184, 41, 122, 231, 166, 174, 210, 155, 233, 8, 83, 128, 145, 208, 28, 139, 149, 46, 168, 246, 21, 38, 126, 197, 29, 147, 234, 81, 253, 218, 217, 136, 216, 237, 206, 196, 113, 231, 152, 52 },
                            Salt = new byte[] { 213, 217, 89, 164, 125, 194, 157, 170, 86, 35, 202, 5, 236, 165, 229, 151, 191, 209, 130, 41, 234, 120, 64, 104, 216, 200, 194, 9, 221, 163, 100, 236, 125, 143, 49, 114, 227, 161, 166, 20, 120, 7, 250, 81, 128, 236, 241, 116, 231, 235, 216, 208, 131, 155, 104, 218, 249, 75, 34, 190, 62, 160, 147, 82, 158, 78, 172, 74, 131, 17, 26, 236, 95, 7, 190, 245, 165, 235, 103, 17, 172, 55, 141, 182, 51, 96, 212, 209, 67, 164, 111, 234, 83, 101, 64, 224, 84, 84, 54, 4 }
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserCreditLimit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CreditLimit")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ModifiedById");

                    b.ToTable("UserCreditLimit", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserGroupId")
                        .HasColumnOrder(0);

                    b.Property<int?>("AppGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int?>("BillProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<int>("BillingOptions")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CreditLimit")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(11);

                    b.Property<int>("CreditLimitOptions")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(9);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsAgeRatingEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(16);

                    b.Property<bool>("IsNegativeBalanceAllowed")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(10);

                    b.Property<bool>("IsWaitingLinePriorityEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<int>("Options")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(8);

                    b.Property<int>("Overrides")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(7);

                    b.Property<int?>("Points")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(15);

                    b.Property<int>("PointsAwardOptions")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(12);

                    b.Property<decimal>("PointsMoneyRatio")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(13);

                    b.Property<int>("PointsTimeRatio")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(14);

                    b.Property<int>("RequiredUserInfo")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<int?>("SecurityProfileId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<int>("WaitingLinePriority")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppGroupId");

                    b.HasIndex("BillProfileId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Name_UserGroup");

                    b.HasIndex("SecurityProfileId");

                    b.ToTable("UserGroup", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillProfileId = 1,
                            BillingOptions = 0,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreditLimit = 0m,
                            CreditLimitOptions = 0,
                            IsAgeRatingEnabled = false,
                            IsDefault = true,
                            IsNegativeBalanceAllowed = false,
                            IsWaitingLinePriorityEnabled = false,
                            Name = "Members",
                            Options = 0,
                            Overrides = 0,
                            PointsAwardOptions = 0,
                            PointsMoneyRatio = 0m,
                            PointsTimeRatio = 0,
                            RequiredUserInfo = 0,
                            WaitingLinePriority = 0
                        },
                        new
                        {
                            Id = 2,
                            BillProfileId = 2,
                            BillingOptions = 0,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreditLimit = 0m,
                            CreditLimitOptions = 0,
                            IsAgeRatingEnabled = false,
                            IsDefault = false,
                            IsNegativeBalanceAllowed = false,
                            IsWaitingLinePriorityEnabled = false,
                            Name = "Guests",
                            Options = 8,
                            Overrides = 0,
                            PointsAwardOptions = 0,
                            PointsMoneyRatio = 0m,
                            PointsTimeRatio = 0,
                            RequiredUserInfo = 0,
                            WaitingLinePriority = 0
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserGroupHostDisallowed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserGroupHostDisallowedId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("HostGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsDisallowed")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HostGroupId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserGroupId", "HostGroupId")
                        .IsUnique()
                        .HasDatabaseName("UQ_UserGroupHostGroup");

                    b.ToTable("UserGroupHostDisallowed", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserPermissionId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserId", "Type", "Value")
                        .IsUnique()
                        .HasDatabaseName("UQ_UserPermission");

                    b.ToTable("UserPermission", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "*"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "CustomPrice"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "NonDefaultVat"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "PayLater"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "VoidInvoices"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "VoidUsedTimeInvoices"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "VoidClosedShiftInvoices"
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "VoidOtherOperatorInvoices"
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "VoidPastDaysInvoices"
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "Deposit"
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "Withdraw"
                        },
                        new
                        {
                            Id = 12,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "VoidDeposits"
                        },
                        new
                        {
                            Id = 13,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "ManualOpenCashDrawer"
                        },
                        new
                        {
                            Id = 14,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "ModifyBillingOptions"
                        },
                        new
                        {
                            Id = 15,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "AllowTimeCredit"
                        },
                        new
                        {
                            Id = 16,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "ViewInvoices"
                        },
                        new
                        {
                            Id = 17,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "ViewPaidInvoices"
                        },
                        new
                        {
                            Id = 18,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "ViewPastDaysInvoices"
                        },
                        new
                        {
                            Id = 19,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "ViewDeposits"
                        },
                        new
                        {
                            Id = 20,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "ViewPastDaysDeposits"
                        },
                        new
                        {
                            Id = 21,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "ViewRegisterTransactions"
                        },
                        new
                        {
                            Id = 22,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "ViewPastDaysRegisterTransactions"
                        },
                        new
                        {
                            Id = 23,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Sale",
                            UserId = 1,
                            Value = "DeleteTimePurchases"
                        },
                        new
                        {
                            Id = 24,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Shift",
                            UserId = 1,
                            Value = "ViewExpected"
                        },
                        new
                        {
                            Id = 25,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Stock",
                            UserId = 1,
                            Value = "*"
                        },
                        new
                        {
                            Id = 26,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Stock",
                            UserId = 1,
                            Value = "Manage"
                        },
                        new
                        {
                            Id = 27,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Stock",
                            UserId = 1,
                            Value = "ViewStockTransactions"
                        },
                        new
                        {
                            Id = 28,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Stock",
                            UserId = 1,
                            Value = "ViewPastDaysStockTransactions"
                        },
                        new
                        {
                            Id = 29,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Management",
                            UserId = 1,
                            Value = "*"
                        },
                        new
                        {
                            Id = 30,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Management",
                            UserId = 1,
                            Value = "Tasks"
                        },
                        new
                        {
                            Id = 31,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Management",
                            UserId = 1,
                            Value = "Processes"
                        },
                        new
                        {
                            Id = 32,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Management",
                            UserId = 1,
                            Value = "Files"
                        },
                        new
                        {
                            Id = 33,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Management",
                            UserId = 1,
                            Value = "Maintenance"
                        },
                        new
                        {
                            Id = 34,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Management",
                            UserId = 1,
                            Value = "Security"
                        },
                        new
                        {
                            Id = 35,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Management",
                            UserId = 1,
                            Value = "LockState"
                        },
                        new
                        {
                            Id = 36,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Management",
                            UserId = 1,
                            Value = "ModuleRestart"
                        },
                        new
                        {
                            Id = 37,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Deployment",
                            UserId = 1,
                            Value = "*"
                        },
                        new
                        {
                            Id = 38,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Monitoring",
                            UserId = 1,
                            Value = "*"
                        },
                        new
                        {
                            Id = 39,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Reports",
                            UserId = 1,
                            Value = "*"
                        },
                        new
                        {
                            Id = 40,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Settings",
                            UserId = 1,
                            Value = "*"
                        },
                        new
                        {
                            Id = 41,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Apps",
                            UserId = 1,
                            Value = "*"
                        },
                        new
                        {
                            Id = 42,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "News",
                            UserId = 1,
                            Value = "*"
                        },
                        new
                        {
                            Id = 43,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "User",
                            UserId = 1,
                            Value = "UserPasswordReset"
                        },
                        new
                        {
                            Id = 44,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "User",
                            UserId = 1,
                            Value = "UserEnable"
                        },
                        new
                        {
                            Id = 45,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "User",
                            UserId = 1,
                            Value = "UserDisable"
                        },
                        new
                        {
                            Id = 46,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "User",
                            UserId = 1,
                            Value = "UserManualLogin"
                        },
                        new
                        {
                            Id = 47,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "User",
                            UserId = 1,
                            Value = "Add"
                        },
                        new
                        {
                            Id = 48,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "User",
                            UserId = 1,
                            Value = "Delete"
                        },
                        new
                        {
                            Id = 49,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "User",
                            UserId = 1,
                            Value = "ChangeUserName"
                        },
                        new
                        {
                            Id = 50,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "User",
                            UserId = 1,
                            Value = "ChangeUserGroup"
                        },
                        new
                        {
                            Id = 51,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "User",
                            UserId = 1,
                            Value = "Edit"
                        },
                        new
                        {
                            Id = 52,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "User",
                            UserId = 1,
                            Value = "AccessStats"
                        },
                        new
                        {
                            Id = 53,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Log",
                            UserId = 1,
                            Value = "*"
                        },
                        new
                        {
                            Id = 54,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Log",
                            UserId = 1,
                            Value = "Clear"
                        },
                        new
                        {
                            Id = 55,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "WaitingLines",
                            UserId = 1,
                            Value = "*"
                        },
                        new
                        {
                            Id = 56,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "WaitingLines",
                            UserId = 1,
                            Value = "Manage"
                        },
                        new
                        {
                            Id = 57,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RegisterTransactions",
                            UserId = 1,
                            Value = "RegisterTransactionsPayIn"
                        },
                        new
                        {
                            Id = 58,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "RegisterTransactions",
                            UserId = 1,
                            Value = "RegisterTransactionsPayOut"
                        },
                        new
                        {
                            Id = 59,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "WebApi",
                            UserId = 1,
                            Value = "*"
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserPicture", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Picture")
                        .HasMaxLength(16777215)
                        .HasColumnType("BLOB")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Id");

                    b.HasIndex("ModifiedById");

                    b.ToTable("UserPicture", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserSessionId")
                        .HasColumnOrder(0);

                    b.Property<double>("BilledSpan")
                        .HasColumnType("REAL")
                        .HasColumnOrder(6);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(9);

                    b.Property<double>("GraceSpan")
                        .HasColumnType("REAL");

                    b.Property<double>("GraceSpanTotal")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("GraceTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("HostId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<double>("PauseSpan")
                        .HasColumnType("REAL");

                    b.Property<double>("PauseSpanTotal")
                        .HasColumnType("REAL");

                    b.Property<double>("PendSpan")
                        .HasColumnType("REAL")
                        .HasColumnOrder(8);

                    b.Property<double>("PendSpanTotal")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("PendTime")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(7);

                    b.Property<int>("Slot")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<double>("Span")
                        .HasColumnType("REAL")
                        .HasColumnOrder(5);

                    b.Property<int>("State")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HostId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSession", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserSessionChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserSessionChangeId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("HostId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int>("Slot")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(5);

                    b.Property<double>("Span")
                        .HasColumnType("REAL")
                        .HasColumnOrder(6);

                    b.Property<int>("State")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int>("UserSessionId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HostId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserSessionId");

                    b.ToTable("UserSessionChange", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Variable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("VariableId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<int>("Scope")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int>("UseOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Name_Variable");

                    b.ToTable("Variable", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Verification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("VerificationId");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TokenId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("Verification", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Void", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("VoidId")
                        .HasColumnOrder(0);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RegisterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RegisterId");

                    b.HasIndex("ShiftId");

                    b.ToTable("Void", (string)null);
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.DeviceHdmi", b =>
                {
                    b.HasBaseType("Gizmo.DAL.Entities.Device");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasDatabaseName("UQ_UniqueId");

                    b.ToTable("DeviceHdmi", (string)null);
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.PaymentIntentDeposit", b =>
                {
                    b.HasBaseType("Gizmo.DAL.Entities.PaymentIntent");

                    b.Property<int?>("DepositPaymentId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasIndex("DepositPaymentId")
                        .IsUnique()
                        .HasDatabaseName("UQ_DepositPayment_PaymentIntentDeposit");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("PaymentIntentDeposit", (string)null);
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.PaymentIntentOrder", b =>
                {
                    b.HasBaseType("Gizmo.DAL.Entities.PaymentIntent");

                    b.Property<int?>("InvoicePaymentId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int>("ProductOrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("InvoicePaymentId")
                        .IsUnique()
                        .HasDatabaseName("UQ_InvoicePayment_PaymentIntentOrder");

                    b.HasIndex("ProductOrderId");

                    b.ToTable("PaymentIntentOrder", (string)null);
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.RefundDepositPayment", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.Refund");

                    b.Property<int?>("DepositPaymentId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int?>("FiscalReceiptId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int>("FiscalReceiptStatus")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.HasIndex("DepositPaymentId")
                        .IsUnique()
                        .HasDatabaseName("UQ_DepositPayment_RefundDepositPayment");

                    b.HasIndex("FiscalReceiptId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("RefundDepositPayment", (string)null);
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.VoidDepositPayment", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.Void");

                    b.Property<int>("DepositPaymentId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasIndex("DepositPaymentId")
                        .IsUnique()
                        .HasDatabaseName("UQ_DepositPayment_VoidDepositPayment");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("VoidDepositPayment", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostComputer", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.Host");

                    b.Property<string>("Hostname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("MACAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.HasIndex("Id");

                    b.HasIndex("MACAddress")
                        .IsUnique()
                        .HasDatabaseName("UQ_MACAddress_HostComputer");

                    b.ToTable("HostComputer", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostEndpoint", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.Host");

                    b.Property<int>("MaximumUsers")
                        .HasColumnType("INTEGER");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("HostEndpoint", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("cd41aa25-ac1f-4da9-8c8e-075032803871"),
                            HostGroupId = 2,
                            IsDeleted = false,
                            Name = "XBOX-ONE-1",
                            Number = 1,
                            State = 0,
                            MaximumUsers = 4
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("cd41aa25-ac1f-4da9-8c8e-075032803872"),
                            HostGroupId = 2,
                            IsDeleted = false,
                            Name = "XBOX-ONE-2",
                            Number = 2,
                            State = 0,
                            MaximumUsers = 4
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("cd41aa25-ac1f-4da9-8c8e-075032803873"),
                            HostGroupId = 2,
                            IsDeleted = false,
                            Name = "PS4-1",
                            Number = 3,
                            State = 0,
                            MaximumUsers = 4
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("cd41aa25-ac1f-4da9-8c8e-075032803874"),
                            HostGroupId = 2,
                            IsDeleted = false,
                            Name = "WII-1",
                            Number = 4,
                            State = 0,
                            MaximumUsers = 4
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.InvoiceLineExtended", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.InvoiceLine");

                    b.Property<int?>("BundleLineId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<int?>("StockReturnTransactionId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int?>("StockTransactionId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.HasIndex("BundleLineId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("StockReturnTransactionId")
                        .IsUnique()
                        .HasDatabaseName("UQ_StockReturnTransaction_InvoiceLineExtended_InvoiceLineProduct_InvoiceLineTime");

                    b.HasIndex("StockTransactionId")
                        .IsUnique()
                        .HasDatabaseName("UQ_StockTransaction_InvoiceLineExtended_InvoiceLineProduct_InvoiceLineTime");

                    b.ToTable("InvoiceLineExtended", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.InvoiceLineSession", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.InvoiceLine");

                    b.Property<int>("OrderLineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsageSessionId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OrderLineId");

                    b.HasIndex("UsageSessionId")
                        .IsUnique()
                        .HasDatabaseName("UQ_UsageSession");

                    b.ToTable("InvoiceLineSession", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.InvoiceLineTimeFixed", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.InvoiceLine");

                    b.Property<bool>("IsDepleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderLineId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OrderLineId")
                        .IsUnique()
                        .HasDatabaseName("UQ_OrderLine_InvoiceLineTimeFixed");

                    b.ToTable("InvoiceLineTimeFixed", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductBaseExtended", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.ProductBase");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("ProductBaseExtended", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductOLExtended", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.ProductOL");

                    b.Property<int?>("BundleLineId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("BundleLineId");

                    b.ToTable("ProductOLExtended", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductOLSession", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.ProductOL");

                    b.Property<int>("UsageSessionId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("UsageSessionId");

                    b.ToTable("ProductOLSession", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductOLTimeFixed", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.ProductOL");

                    b.ToTable("ProductOLTimeFixed", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductTime", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.ProductBase");

                    b.Property<int?>("AppGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpirationOptions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpireAfterType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpireAtDayTimeMinute")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpireFromOptions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpiresAfter")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Minutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsageOptions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UseOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WeekDayMaxMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WeekEndMaxMinutes")
                        .HasColumnType("INTEGER");

                    b.HasIndex("AppGroupId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("ProductTime", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Guid = new Guid("39a65689-65ae-49b4-80b9-ea0afb9daba6"),
                            IsDeleted = false,
                            Name = "Six Hours (6)",
                            OrderOptions = 0,
                            Price = 12m,
                            ProductGroupId = 1,
                            PurchaseOptions = 0,
                            StockAlert = 0m,
                            StockOptions = 0,
                            StockProductAmount = 0m,
                            ExpirationOptions = 0,
                            ExpireAfterType = 0,
                            ExpireAtDayTimeMinute = 0,
                            ExpireFromOptions = 0,
                            ExpiresAfter = 0,
                            Minutes = 360,
                            UsageOptions = 0,
                            UseOrder = 0
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Guid = new Guid("39a65689-65ae-49b4-80b9-ea0afb9daba7"),
                            IsDeleted = false,
                            Name = "Six Hours (6 Weekends)",
                            OrderOptions = 0,
                            Price = 16m,
                            ProductGroupId = 1,
                            PurchaseOptions = 0,
                            StockAlert = 0m,
                            StockOptions = 0,
                            StockProductAmount = 0m,
                            ExpirationOptions = 0,
                            ExpireAfterType = 0,
                            ExpireAtDayTimeMinute = 0,
                            ExpireFromOptions = 0,
                            ExpiresAfter = 0,
                            Minutes = 360,
                            UsageOptions = 0,
                            UseOrder = 0
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.RefundInvoicePayment", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.Refund");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int>("InvoicePaymentId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("InvoiceId");

                    b.HasIndex("InvoicePaymentId")
                        .IsUnique()
                        .HasDatabaseName("UQ_InvoicePayment_RefundInvoicePayment");

                    b.ToTable("RefundInvoicePayment", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.TaskJunction", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.TaskBase");

                    b.Property<string>("DestinationDirectory")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Options")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceDirectory")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.ToTable("TaskJunction", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.TaskNotification", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.TaskBase");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationOptions")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.ToTable("TaskNotification", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.TaskProcess", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.TaskBase");

                    b.Property<string>("Arguments")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("Password")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.Property<int>("ProcessOptions")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(6);

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<string>("WorkingDirectory")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.ToTable("TaskProcess", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.TaskScript", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.TaskBase");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProcessOptions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScriptType")
                        .HasColumnType("INTEGER");

                    b.ToTable("TaskScript", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UsageUserSession", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.Usage");

                    b.Property<int>("UserSessionId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserSessionId");

                    b.ToTable("UsageUserSession", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserMember", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.User");

                    b.Property<int?>("BillingOptions")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DisabledDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsNegativeBalanceAllowed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPersonalInfoRequested")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UQ_Email_UserGuest_UserMember");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserGroupId");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("UQ_Username_UserGuest_UserMember");

                    b.ToTable("UserMember", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("38753737-24f1-40d7-8ac4-ba61660d666a"),
                            IsDeleted = false,
                            IsDisabled = false,
                            Sex = 0,
                            IsPersonalInfoRequested = false,
                            UserGroupId = 1,
                            Username = "User"
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserNote", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.Note");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserNoteOptions")
                        .HasColumnType("INTEGER");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserNote", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserOperator", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.User");

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("TEXT");

                    b.Property<int>("ShiftOptions")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UQ_Email_UserOperator");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("UQ_Username_UserOperator");

                    b.ToTable("UserOperator", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("691ea8b4-d794-4096-84ae-bbdb7bcc0b02"),
                            IsDeleted = false,
                            IsDisabled = false,
                            Sex = 0,
                            ShiftOptions = 0,
                            Username = "Admin"
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.VerificationEmail", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.Verification");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("TEXT");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("VerificationEmail", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.VerificationMobilePhone", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.Verification");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("VerificationMobilePhone", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.VoidInvoice", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.Void");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("InvoiceId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Invoice");

                    b.ToTable("VoidInvoice", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.InvoiceLineProduct", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.InvoiceLineExtended");

                    b.Property<int>("OrderLineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("OrderLineId")
                        .IsUnique()
                        .HasDatabaseName("UQ_OrderLine_InvoiceLineProduct");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceLineProduct", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.InvoiceLineTime", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.InvoiceLineExtended");

                    b.Property<bool>("IsDepleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderLineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductTimeId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("OrderLineId")
                        .IsUnique()
                        .HasDatabaseName("UQ_OrderLine_InvoiceLineTime");

                    b.HasIndex("ProductTimeId");

                    b.ToTable("InvoiceLineTime", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Product", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.ProductBaseExtended");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 0.90m,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Guid = new Guid("39a65689-65ae-49b4-80b9-ea0afb9daba1"),
                            IsDeleted = false,
                            Name = "Mars Bar",
                            OrderOptions = 0,
                            Points = 10,
                            Price = 1.10m,
                            ProductGroupId = 4,
                            PurchaseOptions = 0,
                            StockAlert = 0m,
                            StockOptions = 1,
                            StockProductAmount = 0m
                        },
                        new
                        {
                            Id = 2,
                            Cost = 1.20m,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Guid = new Guid("39a65689-65ae-49b4-80b9-ea0afb9daba2"),
                            IsDeleted = false,
                            Name = "Snickers Bar",
                            OrderOptions = 0,
                            Points = 15,
                            Price = 2.0m,
                            ProductGroupId = 4,
                            PurchaseOptions = 0,
                            StockAlert = 0m,
                            StockOptions = 1,
                            StockProductAmount = 0m
                        },
                        new
                        {
                            Id = 3,
                            Cost = 2.20m,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Guid = new Guid("39a65689-65ae-49b4-80b9-ea0afb9daba3"),
                            IsDeleted = false,
                            Name = "Pizza (Small)",
                            OrderOptions = 0,
                            Price = 6.0m,
                            ProductGroupId = 2,
                            PurchaseOptions = 0,
                            StockAlert = 0m,
                            StockOptions = 0,
                            StockProductAmount = 0m
                        },
                        new
                        {
                            Id = 4,
                            Cost = 1.20m,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Guid = new Guid("39a65689-65ae-49b4-80b9-ea0afb9daba4"),
                            IsDeleted = false,
                            Name = "Coca Cola (Can)",
                            OrderOptions = 0,
                            Price = 2.0m,
                            ProductGroupId = 3,
                            PurchaseOptions = 0,
                            StockAlert = 0m,
                            StockOptions = 0,
                            StockProductAmount = 0m
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductBundle", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.ProductBaseExtended");

                    b.Property<int>("BundleStockOptions")
                        .HasColumnType("INTEGER");

                    b.ToTable("ProductBundle", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayOrder = 0,
                            Guid = new Guid("39a65689-65ae-49b4-80b9-ea0afb9daba5"),
                            IsDeleted = false,
                            Name = "Pizza and Cola",
                            OrderOptions = 0,
                            Points = 200,
                            Price = 3.40m,
                            ProductGroupId = 2,
                            PurchaseOptions = 0,
                            StockAlert = 0m,
                            StockOptions = 1,
                            StockProductAmount = 0m,
                            BundleStockOptions = 0
                        });
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductOLProduct", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.ProductOLExtended");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOLProduct", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductOLTime", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.ProductOLExtended");

                    b.Property<int>("ProductTimeId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ProductTimeId");

                    b.ToTable("ProductOLTime", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UsageRate", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.UsageUserSession");

                    b.Property<DateTime>("BillProfileStamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("BillRateId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<decimal>("Rate")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<decimal>("Total")
                        .HasPrecision(19, 4)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasIndex("BillRateId");

                    b.ToTable("UsageRate", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UsageTime", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.UsageUserSession");

                    b.Property<int>("InvoiceLineId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("InvoiceLineId");

                    b.ToTable("UsageTime", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UsageTimeFixed", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.UsageUserSession");

                    b.Property<int>("InvoiceLineId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("InvoiceLineId");

                    b.ToTable("UsageTimeFixed", (string)null);
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserGuest", b =>
                {
                    b.HasBaseType("GizmoDALV2.Entities.UserMember");

                    b.Property<bool>("IsJoined")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsReserved")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int?>("ReservedHostId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<int?>("ReservedSlot")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.HasIndex("ReservedHostId", "ReservedSlot")
                        .IsUnique()
                        .HasDatabaseName("UQ_UserGuestHostSlot");

                    b.ToTable("UserGuest", (string)null);
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.Device", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.DeviceHost", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Gizmo.DAL.Entities.Device", "Device")
                        .WithMany("Hosts")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.Host", "Host")
                        .WithMany("Devices")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Device");

                    b.Navigation("Host");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.FiscalReceipt", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.Register", "Register")
                        .WithMany()
                        .HasForeignKey("RegisterId");

                    b.HasOne("GizmoDALV2.Entities.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Register");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.InvoiceFiscalReceipt", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Gizmo.DAL.Entities.FiscalReceipt", "FiscalReceipt")
                        .WithMany()
                        .HasForeignKey("FiscalReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.Invoice", "Invoice")
                        .WithMany("FiscalReceipts")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.Register", "Register")
                        .WithMany()
                        .HasForeignKey("RegisterId");

                    b.HasOne("GizmoDALV2.Entities.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId");

                    b.Navigation("CreatedBy");

                    b.Navigation("FiscalReceipt");

                    b.Navigation("Invoice");

                    b.Navigation("Register");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.PaymentIntent", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("PaymentIntents")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany("PaymentIntents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.UserAgreement", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.UserAgreementState", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("Gizmo.DAL.Entities.UserAgreement", "UserAgreement")
                        .WithMany("UserAgreementStates")
                        .HasForeignKey("UserAgreementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.User", "User")
                        .WithMany("UserAgreementStates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("User");

                    b.Navigation("UserAgreement");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.App", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.AppCategory", "AppCategory")
                        .WithMany("Apps")
                        .HasForeignKey("AppCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.AppEnterprise", "Developer")
                        .WithMany("DevelopedApps")
                        .HasForeignKey("DeveloperId");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.AppEnterprise", "Publisher")
                        .WithMany("PublishedApps")
                        .HasForeignKey("PublisherId");

                    b.Navigation("AppCategory");

                    b.Navigation("CreatedBy");

                    b.Navigation("Developer");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppCategory", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.AppCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppEnterprise", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppExe", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.App", "App")
                        .WithMany("AppExes")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.Deployment", "DefaultDeployment")
                        .WithMany("DefaultedAppExes")
                        .HasForeignKey("DefaultDeploymentId");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("App");

                    b.Navigation("CreatedBy");

                    b.Navigation("DefaultDeployment");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppExeCdImage", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.AppExe", "AppExe")
                        .WithMany("AppExeCdImages")
                        .HasForeignKey("AppExeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("AppExe");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppExeDeployment", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.AppExe", "AppExe")
                        .WithMany("Deployments")
                        .HasForeignKey("AppExeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.Deployment", "Deployment")
                        .WithMany("DependentAppExes")
                        .HasForeignKey("DeploymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("AppExe");

                    b.Navigation("CreatedBy");

                    b.Navigation("Deployment");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppExeImage", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.AppExe", "AppExe")
                        .WithOne("Image")
                        .HasForeignKey("GizmoDALV2.Entities.AppExeImage", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("AppExe");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppExeLicense", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.AppExe", "AppExe")
                        .WithMany("Licenses")
                        .HasForeignKey("AppExeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.License", "License")
                        .WithMany("AppExes")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("AppExe");

                    b.Navigation("CreatedBy");

                    b.Navigation("License");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppExeMaxUser", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.AppExe", "AppExe")
                        .WithMany("MaxUsers")
                        .HasForeignKey("AppExeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("AppExe");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppExePersonalFile", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.AppExe", "AppExe")
                        .WithMany("PersonalFiles")
                        .HasForeignKey("AppExeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.PersonalFile", "PersonalFile")
                        .WithMany("AppExes")
                        .HasForeignKey("PersonalFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppExe");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PersonalFile");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppExeTask", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.AppExe", "AppExe")
                        .WithMany("Tasks")
                        .HasForeignKey("AppExeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.TaskBase", "TaskBase")
                        .WithMany("UsedByAppExe")
                        .HasForeignKey("TaskBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppExe");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("TaskBase");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppGroup", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppGroupApp", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.AppGroup", "AppGroup")
                        .WithMany("Apps")
                        .HasForeignKey("AppGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.App", "App")
                        .WithMany("AppGroups")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("App");

                    b.Navigation("AppGroup");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppImage", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.App", "App")
                        .WithOne("Image")
                        .HasForeignKey("GizmoDALV2.Entities.AppImage", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("App");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppLink", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.App", "App")
                        .WithMany("AppLinks")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("App");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppRating", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.App", "App")
                        .WithMany("AppRatings")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany("AppRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("App");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppStat", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.AppExe", "AppExe")
                        .WithMany("AppStats")
                        .HasForeignKey("AppExeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.App", "App")
                        .WithMany("AppStats")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.HostComputer", "Host")
                        .WithMany("AppStats")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany("AppStats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("App");

                    b.Navigation("AppExe");

                    b.Navigation("Host");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Asset", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.AssetType", "AssetType")
                        .WithMany("Assets")
                        .HasForeignKey("AssetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("AssetType");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AssetTransaction", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.Asset", "Asset")
                        .WithMany("Transactions")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.AssetType", "AssetType")
                        .WithMany("Transactions")
                        .HasForeignKey("AssetTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CheckedInBy")
                        .WithMany()
                        .HasForeignKey("CheckedInById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany("AssetTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("AssetType");

                    b.Navigation("CheckedInBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AssetType", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Attribute", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.BillProfile", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.BillRate", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.BillProfile", "BillProfile")
                        .WithMany("BillRates")
                        .HasForeignKey("BillProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillProfile");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.BillRatePeriodDay", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.BillRate", "BillRate")
                        .WithMany("Days")
                        .HasForeignKey("BillRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillRate");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.BillRatePeriodDayTime", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.BillRatePeriodDay", "Day")
                        .WithMany("Times")
                        .HasForeignKey("PeriodDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.BillRateStep", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.BillRate", "BillRate")
                        .WithMany("BillRateSteps")
                        .HasForeignKey("BillRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillRate");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.BundleProduct", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.ProductBundle", "ProductBundle")
                        .WithMany("BundledProducts")
                        .HasForeignKey("ProductBundleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.ProductBase", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Product");

                    b.Navigation("ProductBundle");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.BundleProductUserPrice", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.BundleProduct", "BundleProduct")
                        .WithMany("UserPrices")
                        .HasForeignKey("BundleProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BundleProduct");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ClientTask", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.TaskBase", "TaskBase")
                        .WithMany("UsedByTask")
                        .HasForeignKey("TaskBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("TaskBase");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Deployment", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.DeploymentDeployment", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.Deployment", "Child")
                        .WithMany("Dependent")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.Deployment", "Parent")
                        .WithMany("Dependencies")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.DepositPayment", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.DepositTransaction", "DepositTransaction")
                        .WithMany()
                        .HasForeignKey("DepositTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gizmo.DAL.Entities.FiscalReceipt", "FiscalReceipt")
                        .WithMany()
                        .HasForeignKey("FiscalReceiptId");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.Register", "Register")
                        .WithMany()
                        .HasForeignKey("RegisterId");

                    b.HasOne("GizmoDALV2.Entities.Shift", "Shift")
                        .WithMany("DepositPayments")
                        .HasForeignKey("ShiftId");

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany("DepositPayments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DepositTransaction");

                    b.Navigation("FiscalReceipt");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Payment");

                    b.Navigation("Register");

                    b.Navigation("Shift");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.DepositTransaction", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany("CreatedDeposits")
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany("ModifiedDeposits")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.Register", "Register")
                        .WithMany()
                        .HasForeignKey("RegisterId");

                    b.HasOne("GizmoDALV2.Entities.Shift", "Shift")
                        .WithMany("Deposits")
                        .HasForeignKey("ShiftId");

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany("Deposits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Register");

                    b.Navigation("Shift");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Feed", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Host", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.HostGroup", "HostGroup")
                        .WithMany("Hosts")
                        .HasForeignKey("HostGroupId");

                    b.HasOne("GizmoDALV2.Entities.Icon", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("HostGroup");

                    b.Navigation("Icon");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostGroup", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.AppGroup", "AppGroup")
                        .WithMany("HostGroups")
                        .HasForeignKey("AppGroupId");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserGroup", "DefaultGuestGroup")
                        .WithMany()
                        .HasForeignKey("DefaultGuestGroupId");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.SecurityProfile", "SecurityProfile")
                        .WithMany("HostGroups")
                        .HasForeignKey("SecurityProfileId");

                    b.Navigation("AppGroup");

                    b.Navigation("CreatedBy");

                    b.Navigation("DefaultGuestGroup");

                    b.Navigation("ModifiedBy");

                    b.Navigation("SecurityProfile");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostGroupUserBillProfile", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.BillProfile", "BillProfile")
                        .WithMany()
                        .HasForeignKey("BillProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.HostGroup", "HostGroup")
                        .WithMany("UserBillProfiles")
                        .HasForeignKey("HostGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillProfile");

                    b.Navigation("HostGroup");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostGroupWaitingLine", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.HostGroup", "HostGroup")
                        .WithOne("WaitingLine")
                        .HasForeignKey("GizmoDALV2.Entities.HostGroupWaitingLine", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("HostGroup");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostGroupWaitingLineEntry", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.HostGroup", "HostGroup")
                        .WithMany("WaitingLineEntries")
                        .HasForeignKey("HostGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.HostGroupWaitingLine", "WatingLine")
                        .WithMany("Entries")
                        .HasForeignKey("HostGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("HostGroup");

                    b.Navigation("ModifiedBy");

                    b.Navigation("User");

                    b.Navigation("WatingLine");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostLayoutGroup", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostLayoutGroupImage", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.HostLayoutGroup", "HostLayoutGroup")
                        .WithOne("Image")
                        .HasForeignKey("GizmoDALV2.Entities.HostLayoutGroupImage", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("HostLayoutGroup");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostLayoutGroupLayout", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.Host", "Host")
                        .WithMany("Layouts")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.HostLayoutGroup", "HostLayoutGroup")
                        .WithMany("Layouts")
                        .HasForeignKey("HostLayoutGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Host");

                    b.Navigation("HostLayoutGroup");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Icon", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Invoice", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.ProductOrder", "ProductOrder")
                        .WithMany("Invoices")
                        .HasForeignKey("ProductOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.Register", "Register")
                        .WithMany()
                        .HasForeignKey("RegisterId");

                    b.HasOne("GizmoDALV2.Entities.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId");

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ProductOrder");

                    b.Navigation("Register");

                    b.Navigation("Shift");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.InvoiceLine", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.PointTransaction", "PointsTransaction")
                        .WithMany()
                        .HasForeignKey("PointsTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GizmoDALV2.Entities.Register", "Register")
                        .WithMany()
                        .HasForeignKey("RegisterId");

                    b.HasOne("GizmoDALV2.Entities.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId");

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Invoice");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PointsTransaction");

                    b.Navigation("Register");

                    b.Navigation("Shift");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.InvoicePayment", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.Invoice", "Invoice")
                        .WithMany("InvoicePayments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.Register", "Register")
                        .WithMany()
                        .HasForeignKey("RegisterId");

                    b.HasOne("GizmoDALV2.Entities.Shift", "Shift")
                        .WithMany("InvoicePayment")
                        .HasForeignKey("ShiftId");

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany("InvoicePayments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Invoice");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Payment");

                    b.Navigation("Register");

                    b.Navigation("Shift");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.License", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.LicenseKey", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.HostComputer", "AssignedHost")
                        .WithMany()
                        .HasForeignKey("AssignedHostId");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.License", "License")
                        .WithMany("LicenseKeys")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("AssignedHost");

                    b.Navigation("CreatedBy");

                    b.Navigation("License");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.LogException", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.Log", "Message")
                        .WithOne("Exception")
                        .HasForeignKey("GizmoDALV2.Entities.LogException", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Mapping", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.MonetaryUnit", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.News", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Note", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Payment", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany("CreatedPayments")
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.DepositTransaction", "DepositTransaction")
                        .WithMany()
                        .HasForeignKey("DepositTransactionId");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany("ModifiedPayments")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.PointTransaction", "PointTransaction")
                        .WithMany()
                        .HasForeignKey("PointTransactionId");

                    b.HasOne("GizmoDALV2.Entities.Register", "Register")
                        .WithMany()
                        .HasForeignKey("RegisterId");

                    b.HasOne("GizmoDALV2.Entities.Shift", "Shift")
                        .WithMany("Payments")
                        .HasForeignKey("ShiftId");

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DepositTransaction");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PointTransaction");

                    b.Navigation("Register");

                    b.Navigation("Shift");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.PaymentMethod", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.PersonalFile", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.PluginLibrary", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.PointTransaction", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.Register", "Register")
                        .WithMany()
                        .HasForeignKey("RegisterId");

                    b.HasOne("GizmoDALV2.Entities.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId");

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany("LoayalityPoints")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Register");

                    b.Navigation("Shift");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.PresetTimeSale", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.PresetTimeSaleMoney", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductBase", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.ProductGroup", "ProductGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.ProductBase", "StockProduct")
                        .WithMany()
                        .HasForeignKey("StockProductId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ProductGroup");

                    b.Navigation("StockProduct");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductBundleUserPrice", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.ProductBundle", "ProductBundle")
                        .WithMany("UserPrices")
                        .HasForeignKey("ProductBundleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ProductBundle");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductGroup", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.ProductGroup", "Parent")
                        .WithMany("ChildGroups")
                        .HasForeignKey("ParentId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductHostHidden", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.HostGroup", "HostGroup")
                        .WithMany("HiddenProducts")
                        .HasForeignKey("HostGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.ProductBase", "Product")
                        .WithMany("HiddenHostGroups")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("HostGroup");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductImage", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.ProductBase", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductOL", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.ProductOrder", "ProductOrder")
                        .WithMany("OrderLines")
                        .HasForeignKey("ProductOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.Register", "Register")
                        .WithMany()
                        .HasForeignKey("RegisterId");

                    b.HasOne("GizmoDALV2.Entities.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId");

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany("ProductOrdersLines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ProductOrder");

                    b.Navigation("Register");

                    b.Navigation("Shift");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductOrder", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany("CreatedOrders")
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.Host", "Host")
                        .WithMany("ProductOrders")
                        .HasForeignKey("HostId");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany("ModifiedOrders")
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.PaymentMethod", "PreferedPaymentMethod")
                        .WithMany()
                        .HasForeignKey("PreferedPaymentMethodId");

                    b.HasOne("GizmoDALV2.Entities.Register", "Register")
                        .WithMany()
                        .HasForeignKey("RegisterId");

                    b.HasOne("GizmoDALV2.Entities.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId");

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany("ProductOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Host");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PreferedPaymentMethod");

                    b.Navigation("Register");

                    b.Navigation("Shift");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductPeriod", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.ProductBase", "Product")
                        .WithOne("Period")
                        .HasForeignKey("GizmoDALV2.Entities.ProductPeriod", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductPeriodDay", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.ProductPeriod", "Period")
                        .WithMany("Days")
                        .HasForeignKey("ProductPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Period");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductPeriodDayTime", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.ProductPeriodDay", "Day")
                        .WithMany("Times")
                        .HasForeignKey("PeriodDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductTax", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.ProductBase", "Product")
                        .WithMany("Taxes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.Tax", "Tax")
                        .WithMany("Products")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Product");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductTimeHostDisallowed", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.HostGroup", "HostGroup")
                        .WithMany("DisallowedTimeOffers")
                        .HasForeignKey("HostGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.ProductTime", "ProductTime")
                        .WithMany("DisallowedHostsGroup")
                        .HasForeignKey("ProductTimeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("HostGroup");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ProductTime");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductTimePeriod", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.ProductTime", "ProductTime")
                        .WithOne("UsePeriod")
                        .HasForeignKey("GizmoDALV2.Entities.ProductTimePeriod", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductTime");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductTimePeriodDay", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.ProductTimePeriod", "Period")
                        .WithMany("Days")
                        .HasForeignKey("ProductTimePeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Period");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductTimePeriodDayTime", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.ProductTimePeriodDay", "Day")
                        .WithMany("Times")
                        .HasForeignKey("PeriodDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductUserDisallowed", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.ProductBase", "Product")
                        .WithMany("DisallowedUserGroups")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserGroup", "UserGroup")
                        .WithMany("DissalowedProducts")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Product");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductUserPrice", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.ProductBase", "Product")
                        .WithMany("UserGroupPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserGroup", "UserGroup")
                        .WithMany("ProductPrices")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Product");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Refund", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.DepositTransaction", "DepositTransaction")
                        .WithMany()
                        .HasForeignKey("DepositTransactionId");

                    b.HasOne("GizmoDALV2.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.HasOne("GizmoDALV2.Entities.PointTransaction", "PointTransaction")
                        .WithMany()
                        .HasForeignKey("PointTransactionId");

                    b.HasOne("GizmoDALV2.Entities.PaymentMethod", "RefundMethod")
                        .WithMany()
                        .HasForeignKey("RefundMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.Register", "Register")
                        .WithMany()
                        .HasForeignKey("RegisterId");

                    b.HasOne("GizmoDALV2.Entities.Shift", "Shift")
                        .WithMany("Refunds")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("DepositTransaction");

                    b.Navigation("Payment");

                    b.Navigation("PointTransaction");

                    b.Navigation("RefundMethod");

                    b.Navigation("Register");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Register", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.RegisterTransaction", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany("RegisterTransactions")
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.Register", "Register")
                        .WithMany("Transactions")
                        .HasForeignKey("RegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.Shift", "Shift")
                        .WithMany("RegisterTransactions")
                        .HasForeignKey("ShiftId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Register");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Reservation", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GizmoDALV2.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ReservationHost", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.Host", "Host")
                        .WithMany()
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.UserMember", "PreferedUser")
                        .WithMany()
                        .HasForeignKey("PreferedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GizmoDALV2.Entities.Reservation", "Reservation")
                        .WithMany("Hosts")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Host");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PreferedUser");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ReservationUser", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.Reservation", "Reservation")
                        .WithMany("Users")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Reservation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.SecurityProfile", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.SecurityProfilePolicy", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.SecurityProfile", "SecurityProfile")
                        .WithMany("Policies")
                        .HasForeignKey("SecurityProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("SecurityProfile");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.SecurityProfileRestriction", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.SecurityProfile", "SecurityProfile")
                        .WithMany("Restrictions")
                        .HasForeignKey("SecurityProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("SecurityProfile");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Setting", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Shift", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "EndedBy")
                        .WithMany()
                        .HasForeignKey("EndedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "Operator")
                        .WithMany("Shifts")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.Register", "Register")
                        .WithMany("Shifts")
                        .HasForeignKey("RegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("EndedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Operator");

                    b.Navigation("Register");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ShiftCount", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.Shift", "Shift")
                        .WithMany("ShiftCounts")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.StockTransaction", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.ProductBase", "Product")
                        .WithMany("StockTransactions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.ProductBase", "SourceProduct")
                        .WithMany("StockTransactionsSource")
                        .HasForeignKey("SourceProductId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Product");

                    b.Navigation("SourceProduct");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.TaskBase", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Tax", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Token", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GizmoDALV2.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GizmoDALV2.Entities.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Usage", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UsageSession", "UsageSession")
                        .WithMany("Usage")
                        .HasForeignKey("UsageSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany("Usage")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UsageSession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UsageSession", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.Usage", "CurrentUsage")
                        .WithMany()
                        .HasForeignKey("CurrentUsageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany("UsageSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CurrentUsage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.User", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserAttribute", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.Attribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.User", "User")
                        .WithMany("Attributes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserCredential", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.User", "User")
                        .WithOne("UserCredential")
                        .HasForeignKey("GizmoDALV2.Entities.UserCredential", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserCreditLimit", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithOne("UserCreditLimit")
                        .HasForeignKey("GizmoDALV2.Entities.UserCreditLimit", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserGroup", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.AppGroup", "AppGroup")
                        .WithMany("UserGroups")
                        .HasForeignKey("AppGroupId");

                    b.HasOne("GizmoDALV2.Entities.BillProfile", "BillProfile")
                        .WithMany("UserGroups")
                        .HasForeignKey("BillProfileId");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.SecurityProfile", "SecurityProfile")
                        .WithMany("UserGroups")
                        .HasForeignKey("SecurityProfileId");

                    b.Navigation("AppGroup");

                    b.Navigation("BillProfile");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("SecurityProfile");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserGroupHostDisallowed", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.HostGroup", "HostGroup")
                        .WithMany("DisallowedUserGroups")
                        .HasForeignKey("HostGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.UserGroup", "UserGroup")
                        .WithMany("DissalowedHostGroups")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("HostGroup");

                    b.Navigation("ModifiedBy");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserPermission", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("GizmoDALV2.Entities.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserPicture", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.User", "User")
                        .WithOne("UserPicture")
                        .HasForeignKey("GizmoDALV2.Entities.UserPicture", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserSession", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.User", "CreatedBy")
                        .WithMany("CreatedUserSessions")
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.Host", "Host")
                        .WithMany("UserSessions")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Host");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserSessionChange", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.User", "CreatedBy")
                        .WithMany("CreatedUserSessionChanges")
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.Host", "Host")
                        .WithMany("UserSessionsChanges")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany("UserSessionsChanges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserSession", "UserSession")
                        .WithMany("UserSessionChanges")
                        .HasForeignKey("UserSessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Host");

                    b.Navigation("User");

                    b.Navigation("UserSession");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Variable", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.UserOperator", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Verification", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GizmoDALV2.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GizmoDALV2.Entities.Token", "Token")
                        .WithMany()
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.User", "User")
                        .WithMany("Verifications")
                        .HasForeignKey("UserId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Token");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Void", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserOperator", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("GizmoDALV2.Entities.Register", "Register")
                        .WithMany()
                        .HasForeignKey("RegisterId");

                    b.HasOne("GizmoDALV2.Entities.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Register");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.DeviceHdmi", b =>
                {
                    b.HasOne("Gizmo.DAL.Entities.Device", null)
                        .WithOne()
                        .HasForeignKey("Gizmo.DAL.Entities.DeviceHdmi", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.PaymentIntentDeposit", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.DepositPayment", "DepositPayment")
                        .WithMany()
                        .HasForeignKey("DepositPaymentId");

                    b.HasOne("Gizmo.DAL.Entities.PaymentIntent", null)
                        .WithOne()
                        .HasForeignKey("Gizmo.DAL.Entities.PaymentIntentDeposit", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepositPayment");
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.PaymentIntentOrder", b =>
                {
                    b.HasOne("Gizmo.DAL.Entities.PaymentIntent", null)
                        .WithOne()
                        .HasForeignKey("Gizmo.DAL.Entities.PaymentIntentOrder", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.InvoicePayment", "InvoicePayment")
                        .WithMany()
                        .HasForeignKey("InvoicePaymentId");

                    b.HasOne("GizmoDALV2.Entities.ProductOrder", "ProductOrder")
                        .WithMany("PaymentIntents")
                        .HasForeignKey("ProductOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InvoicePayment");

                    b.Navigation("ProductOrder");
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.RefundDepositPayment", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.DepositPayment", "DepositPayment")
                        .WithMany()
                        .HasForeignKey("DepositPaymentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Gizmo.DAL.Entities.FiscalReceipt", "FiscalReceipt")
                        .WithMany()
                        .HasForeignKey("FiscalReceiptId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GizmoDALV2.Entities.Refund", null)
                        .WithOne()
                        .HasForeignKey("Gizmo.DAL.Entities.RefundDepositPayment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepositPayment");

                    b.Navigation("FiscalReceipt");
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.VoidDepositPayment", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.DepositPayment", "DepositPayment")
                        .WithMany("Voids")
                        .HasForeignKey("DepositPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.Void", null)
                        .WithOne()
                        .HasForeignKey("Gizmo.DAL.Entities.VoidDepositPayment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepositPayment");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostComputer", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.Host", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.HostComputer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostEndpoint", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.Host", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.HostEndpoint", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GizmoDALV2.Entities.InvoiceLineExtended", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.InvoiceLineProduct", "BundleLine")
                        .WithMany()
                        .HasForeignKey("BundleLineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GizmoDALV2.Entities.InvoiceLine", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.InvoiceLineExtended", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.StockTransaction", "StockReturnTransaction")
                        .WithMany()
                        .HasForeignKey("StockReturnTransactionId");

                    b.HasOne("GizmoDALV2.Entities.StockTransaction", "StockTransaction")
                        .WithMany()
                        .HasForeignKey("StockTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BundleLine");

                    b.Navigation("StockReturnTransaction");

                    b.Navigation("StockTransaction");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.InvoiceLineSession", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.InvoiceLine", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.InvoiceLineSession", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.ProductOLSession", "OrderLine")
                        .WithMany()
                        .HasForeignKey("OrderLineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UsageSession", "UsageSession")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("UsageSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderLine");

                    b.Navigation("UsageSession");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.InvoiceLineTimeFixed", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.InvoiceLine", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.InvoiceLineTimeFixed", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.ProductOLTimeFixed", "OrderLine")
                        .WithMany()
                        .HasForeignKey("OrderLineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OrderLine");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductBaseExtended", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.ProductBase", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.ProductBaseExtended", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductOLExtended", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.ProductOLProduct", "BundleLine")
                        .WithMany()
                        .HasForeignKey("BundleLineId");

                    b.HasOne("GizmoDALV2.Entities.ProductOL", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.ProductOLExtended", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BundleLine");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductOLSession", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.ProductOL", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.ProductOLSession", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UsageSession", "UsageSession")
                        .WithMany()
                        .HasForeignKey("UsageSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsageSession");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductOLTimeFixed", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.ProductOL", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.ProductOLTimeFixed", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductTime", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.AppGroup", "AppGroup")
                        .WithMany("TimeOffers")
                        .HasForeignKey("AppGroupId");

                    b.HasOne("GizmoDALV2.Entities.ProductBase", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.ProductTime", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppGroup");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.RefundInvoicePayment", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.Refund", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.RefundInvoicePayment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.InvoicePayment", "InvoicePayment")
                        .WithMany()
                        .HasForeignKey("InvoicePaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("InvoicePayment");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.TaskJunction", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.TaskBase", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.TaskJunction", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GizmoDALV2.Entities.TaskNotification", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.TaskBase", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.TaskNotification", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GizmoDALV2.Entities.TaskProcess", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.TaskBase", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.TaskProcess", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GizmoDALV2.Entities.TaskScript", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.TaskBase", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.TaskScript", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UsageUserSession", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.Usage", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.UsageUserSession", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserSession", "UserSession")
                        .WithMany("Usage")
                        .HasForeignKey("UserSessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserSession");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserMember", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.UserMember", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserGroup", "UserGroup")
                        .WithMany("Users")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserNote", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.Note", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.UserNote", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UserMember", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserOperator", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.UserOperator", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GizmoDALV2.Entities.VerificationEmail", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.Verification", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.VerificationEmail", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GizmoDALV2.Entities.VerificationMobilePhone", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.Verification", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.VerificationMobilePhone", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GizmoDALV2.Entities.VoidInvoice", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.Void", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.VoidInvoice", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.Invoice", "Invoice")
                        .WithMany("Voids")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.InvoiceLineProduct", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.InvoiceLineExtended", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.InvoiceLineProduct", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.ProductOLProduct", "OrderLine")
                        .WithMany()
                        .HasForeignKey("OrderLineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.ProductBaseExtended", "Product")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OrderLine");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.InvoiceLineTime", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.InvoiceLineExtended", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.InvoiceLineTime", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.ProductOLTime", "OrderLine")
                        .WithMany()
                        .HasForeignKey("OrderLineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.ProductTime", "Product")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("ProductTimeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OrderLine");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Product", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.ProductBaseExtended", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.Product", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductBundle", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.ProductBaseExtended", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.ProductBundle", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductOLProduct", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.ProductOLExtended", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.ProductOLProduct", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.ProductBaseExtended", "Product")
                        .WithMany("OrderLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductOLTime", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.ProductOLExtended", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.ProductOLTime", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.ProductTime", "ProductTime")
                        .WithMany("OrderLines")
                        .HasForeignKey("ProductTimeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductTime");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UsageRate", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.BillRate", "BillRate")
                        .WithMany("Usage")
                        .HasForeignKey("BillRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.UsageUserSession", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.UsageRate", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillRate");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UsageTime", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UsageUserSession", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.UsageTime", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.InvoiceLineTime", "InvoiceLine")
                        .WithMany("Usages")
                        .HasForeignKey("InvoiceLineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InvoiceLine");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UsageTimeFixed", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UsageUserSession", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.UsageTimeFixed", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.InvoiceLineTimeFixed", "InvoiceLine")
                        .WithMany("Usages")
                        .HasForeignKey("InvoiceLineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InvoiceLine");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserGuest", b =>
                {
                    b.HasOne("GizmoDALV2.Entities.UserMember", null)
                        .WithOne()
                        .HasForeignKey("GizmoDALV2.Entities.UserGuest", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GizmoDALV2.Entities.Host", "ReservedHost")
                        .WithMany("ReservedGuests")
                        .HasForeignKey("ReservedHostId");

                    b.Navigation("ReservedHost");
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.Device", b =>
                {
                    b.Navigation("Hosts");
                });

            modelBuilder.Entity("Gizmo.DAL.Entities.UserAgreement", b =>
                {
                    b.Navigation("UserAgreementStates");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.App", b =>
                {
                    b.Navigation("AppExes");

                    b.Navigation("AppGroups");

                    b.Navigation("AppLinks");

                    b.Navigation("AppRatings");

                    b.Navigation("AppStats");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppCategory", b =>
                {
                    b.Navigation("Apps");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppEnterprise", b =>
                {
                    b.Navigation("DevelopedApps");

                    b.Navigation("PublishedApps");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppExe", b =>
                {
                    b.Navigation("AppExeCdImages");

                    b.Navigation("AppStats");

                    b.Navigation("Deployments");

                    b.Navigation("Image");

                    b.Navigation("Licenses");

                    b.Navigation("MaxUsers");

                    b.Navigation("PersonalFiles");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AppGroup", b =>
                {
                    b.Navigation("Apps");

                    b.Navigation("HostGroups");

                    b.Navigation("TimeOffers");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Asset", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.AssetType", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.BillProfile", b =>
                {
                    b.Navigation("BillRates");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.BillRate", b =>
                {
                    b.Navigation("BillRateSteps");

                    b.Navigation("Days");

                    b.Navigation("Usage");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.BillRatePeriodDay", b =>
                {
                    b.Navigation("Times");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.BundleProduct", b =>
                {
                    b.Navigation("UserPrices");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Deployment", b =>
                {
                    b.Navigation("DefaultedAppExes");

                    b.Navigation("Dependencies");

                    b.Navigation("Dependent");

                    b.Navigation("DependentAppExes");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.DepositPayment", b =>
                {
                    b.Navigation("Voids");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Host", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Layouts");

                    b.Navigation("ProductOrders");

                    b.Navigation("ReservedGuests");

                    b.Navigation("UserSessions");

                    b.Navigation("UserSessionsChanges");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostGroup", b =>
                {
                    b.Navigation("DisallowedTimeOffers");

                    b.Navigation("DisallowedUserGroups");

                    b.Navigation("HiddenProducts");

                    b.Navigation("Hosts");

                    b.Navigation("UserBillProfiles");

                    b.Navigation("WaitingLine");

                    b.Navigation("WaitingLineEntries");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostGroupWaitingLine", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostLayoutGroup", b =>
                {
                    b.Navigation("Image");

                    b.Navigation("Layouts");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Invoice", b =>
                {
                    b.Navigation("FiscalReceipts");

                    b.Navigation("InvoiceLines");

                    b.Navigation("InvoicePayments");

                    b.Navigation("Voids");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.License", b =>
                {
                    b.Navigation("AppExes");

                    b.Navigation("LicenseKeys");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Log", b =>
                {
                    b.Navigation("Exception");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.PaymentMethod", b =>
                {
                    b.Navigation("PaymentIntents");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.PersonalFile", b =>
                {
                    b.Navigation("AppExes");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductBase", b =>
                {
                    b.Navigation("DisallowedUserGroups");

                    b.Navigation("HiddenHostGroups");

                    b.Navigation("Images");

                    b.Navigation("Period");

                    b.Navigation("StockTransactions");

                    b.Navigation("StockTransactionsSource");

                    b.Navigation("Taxes");

                    b.Navigation("UserGroupPrices");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductGroup", b =>
                {
                    b.Navigation("ChildGroups");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductOrder", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("OrderLines");

                    b.Navigation("PaymentIntents");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductPeriod", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductPeriodDay", b =>
                {
                    b.Navigation("Times");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductTimePeriod", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductTimePeriodDay", b =>
                {
                    b.Navigation("Times");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Register", b =>
                {
                    b.Navigation("Shifts");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Reservation", b =>
                {
                    b.Navigation("Hosts");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.SecurityProfile", b =>
                {
                    b.Navigation("HostGroups");

                    b.Navigation("Policies");

                    b.Navigation("Restrictions");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Shift", b =>
                {
                    b.Navigation("DepositPayments");

                    b.Navigation("Deposits");

                    b.Navigation("InvoicePayment");

                    b.Navigation("Payments");

                    b.Navigation("Refunds");

                    b.Navigation("RegisterTransactions");

                    b.Navigation("ShiftCounts");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.TaskBase", b =>
                {
                    b.Navigation("UsedByAppExe");

                    b.Navigation("UsedByTask");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.Tax", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UsageSession", b =>
                {
                    b.Navigation("InvoiceLines");

                    b.Navigation("Usage");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.User", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("CreatedUserSessionChanges");

                    b.Navigation("CreatedUserSessions");

                    b.Navigation("Permissions");

                    b.Navigation("Tokens");

                    b.Navigation("UserAgreementStates");

                    b.Navigation("UserCredential");

                    b.Navigation("UserPicture");

                    b.Navigation("Verifications");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserGroup", b =>
                {
                    b.Navigation("DissalowedHostGroups");

                    b.Navigation("DissalowedProducts");

                    b.Navigation("ProductPrices");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserSession", b =>
                {
                    b.Navigation("Usage");

                    b.Navigation("UserSessionChanges");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.HostComputer", b =>
                {
                    b.Navigation("AppStats");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.InvoiceLineTimeFixed", b =>
                {
                    b.Navigation("Usages");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductBaseExtended", b =>
                {
                    b.Navigation("InvoiceLines");

                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductTime", b =>
                {
                    b.Navigation("DisallowedHostsGroup");

                    b.Navigation("InvoiceLines");

                    b.Navigation("OrderLines");

                    b.Navigation("UsePeriod");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserMember", b =>
                {
                    b.Navigation("AppRatings");

                    b.Navigation("AppStats");

                    b.Navigation("AssetTransactions");

                    b.Navigation("DepositPayments");

                    b.Navigation("Deposits");

                    b.Navigation("InvoiceLines");

                    b.Navigation("InvoicePayments");

                    b.Navigation("Invoices");

                    b.Navigation("LoayalityPoints");

                    b.Navigation("Notes");

                    b.Navigation("PaymentIntents");

                    b.Navigation("Payments");

                    b.Navigation("ProductOrders");

                    b.Navigation("ProductOrdersLines");

                    b.Navigation("Reservations");

                    b.Navigation("Usage");

                    b.Navigation("UsageSessions");

                    b.Navigation("UserCreditLimit");

                    b.Navigation("UserSessions");

                    b.Navigation("UserSessionsChanges");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.UserOperator", b =>
                {
                    b.Navigation("CreatedDeposits");

                    b.Navigation("CreatedOrders");

                    b.Navigation("CreatedPayments");

                    b.Navigation("ModifiedDeposits");

                    b.Navigation("ModifiedOrders");

                    b.Navigation("ModifiedPayments");

                    b.Navigation("RegisterTransactions");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.InvoiceLineTime", b =>
                {
                    b.Navigation("Usages");
                });

            modelBuilder.Entity("GizmoDALV2.Entities.ProductBundle", b =>
                {
                    b.Navigation("BundledProducts");

                    b.Navigation("UserPrices");
                });
#pragma warning restore 612, 618
        }
    }
}
